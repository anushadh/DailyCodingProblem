package problems;
/* IMPORTANT: Multiple classes and nested static classes are supported */

/*
 * uncomment this if you want to read input.
//imports for BufferedReader
import java.io.BufferedReader;
import java.io.InputStreamReader;
*/
//import for Scanner and other utility classes
import java.util.*;
import java.util.Map.Entry;


// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail

class TestClass {
	 static long startTime;
    public static void main(String args[] ) throws Exception {
    	
        /* Sample code to perform I/O:
         * Use either of these methods for input

        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String name = br.readLine();                // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT
        */
        //Scanner
        Scanner s = new Scanner(System.in);
        //String name = s.nextLine();                 // Reading input from STDIN
        //System.out.println("Hi, " + name + ".");    // Writing output to STDOUT
        int T = s.nextInt();
        for(int i = 0; i < T; i++) {
            String N = s.next();
            int x = findX(N);
            System.out.println(x);
        }
        final long endTime = System.currentTimeMillis();
        System.out.println((endTime-startTime)/1000);
     }
     
     static int findX(String N) {
    	 startTime = System.currentTimeMillis();
         String input = N;
         String palindrome = input;
         
         for(int i = input.length()-1; i >= 0; i--) {
             palindrome += palindrome.charAt(i);
         }
         
         int x = countOfMaxChar(palindrome);
         return x; 
         
     }
     
     static int countOfMaxChar(String palindrome) {
         HashMap<Character, Integer> hm = new HashMap<Character, Integer>();
         int countOfMaxChar = 0;
         for(int i = 0; i < palindrome.length(); i++) {
             char c = palindrome.charAt(i);
             if(hm.containsKey(c)) {
                 int value = hm.get(c);
                 hm.put(c, value++);
             } else {
                 hm.put(c, 1);
             }
             if(hm.get(c) > countOfMaxChar) {
                 countOfMaxChar = hm.get(c);
             }
         }
        int x = -1;
         for(Entry<Character, Integer> e : hm.entrySet()) {
             if(countOfMaxChar == e.getValue()) {
                int temp = Integer.parseInt(String.valueOf(e.getKey()));
                if(x < 0) {
                    x = temp;
                } else if(x > temp) {
                    x = temp;
                }
             }
         }
         return x;
     }
}
