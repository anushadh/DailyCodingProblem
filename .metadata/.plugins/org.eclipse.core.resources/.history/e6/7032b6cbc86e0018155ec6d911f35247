package algorithms;

import java.util.Arrays;

/* 
 * Worst Case - O(N^2) When the list is unsorted
 * Best Case - O(N) - When the list is already sorted
 */
public class BubbleSort {
	
	public static void main(String[] args) {		
		int[] array = new int[] {456, 567, 234, 678, 123};
		int[] array2 = new int[] {1, 2, 3, 4, 5};
		System.out.println("Initial Array:: " + Arrays.toString(array));
		BubbleSort bs = new BubbleSort();
		int[] sortedArray = bs.bubbleSort(array, array.length);		
		System.out.println("Sorted Array:: " + Arrays.toString(sortedArray));
	}
	
	private int[] bubbleSort(int[] array, int size) {
		long startTime = System.currentTimeMillis();
		int i = 0;
		while(i < size) {
			boolean swap = false;
			for(int j = 0; j < size-1; j++) {
				if(array[j] > array[j+1]) {
					swap = true;
					int temp = array[j];
					array[j] = array[j+1];
					array[j+1] = temp;
				}
			}
			//When the list is already sorted, swap remains false and the sorting can be terminated
			if(!swap) {
				break;
			}
			i++;
		}
		long endTime = System.currentTimeMillis();
		System.out.println("Time taken for bubble sort:: " + (endTime - startTime));
		return array;
	}
}
